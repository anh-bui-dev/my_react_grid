{"ast":null,"code":"var _jsxFileName = \"/Users/jimmybui/Documents/Web&App/example/my_react_grid/frontend/src/components/jobs.js\";\nimport React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-blue.css';\nimport Popup from './popup';\nimport Loading from './loading';\nimport Error from './error';\nimport moment from 'moment';\nimport axios from 'axios';\n\nclass Jobs extends Component {\n  // Initialization\n  constructor(props) {\n    super(props);\n\n    this.onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n      this.gridApi.sizeColumnsToFit();\n      this.gridColumnApi.autoSizeColumns();\n    };\n\n    this.state = {\n      openPopup: false,\n      error: null,\n      loading: true,\n      detail: {},\n      columnDefs: [{\n        headerName: \"Title\",\n        field: \"title\",\n        width: 500\n      }, {\n        headerName: \"Type\",\n        field: \"job_type\",\n        width: 200\n      }, {\n        headerName: \"Location\",\n        field: \"location\",\n        width: 200\n      }, {\n        headerName: \"Date\",\n        field: \"date\",\n        cellClass: \"grid-number\",\n        width: 150,\n        cellRenderer: data => {\n          return moment(data.value).format(\"DD/MM/YYYY\");\n        }\n      }],\n      rowData: []\n    };\n    this.handlePopup = this.handlePopup.bind(this);\n  } // Handle showing and hiding the popup\n\n\n  handlePopup(row) {\n    // Get the detail job\n    this.setState({\n      openPopup: !this.state.openPopup,\n      detail: row && row.data ? row.data : {}\n    });\n  }\n\n  componentDidMount() {\n    // Assume the request will be a haft of second\n\n    /* setTimeout(()=>{\n      // Get the list of jobs\n      axios.get('http://localhost:4000/jobs')\n      .then(resp => {\n        const jobs = resp.data.sort((a, b) => a.title.localeCompare(b.title));\n        this.setState({\n          loading: false,\n          rowData: jobs\n        })\n      }).catch((err) => \n        this.setState({\n          loading: false,\n          error: err\n        })\n      );\n    }, 500); */\n    // Get the list of jobs\n    Promise.all([axios.get('http://localhost:4000/jobs'), axios.get('http://localhost:4000/applicants'), axios.get('http://localhost:4000/job_types')]).then(([resp, resp1, resp3]) => {\n      const jobs = resp.data.map(item => {\n        // Get the list of applicants\n        const applicants = item.applicants.map(applicant => {\n          return resp1.data.find(item1 => item1.id == applicant);\n        }); // Get job type name\n\n        const types = resp3.data.find(item3 => item3.id == item.job_type_id);\n        return Object.assign(item, {\n          applicants: applicants\n        });\n      }).sort((a, b) => a.title.localeCompare(b.title));\n      console.log(jobs);\n      this.setState({\n        loading: false,\n        rowData: jobs\n      });\n    }).catch(err => this.setState({\n      loading: false,\n      error: err\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          openPopup = _this$state.openPopup,\n          error = _this$state.error,\n          loading = _this$state.loading,\n          detail = _this$state.detail,\n          columnDefs = _this$state.columnDefs,\n          rowData = _this$state.rowData;\n\n    if (error) {\n      return React.createElement(Error, {\n        message: error.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      });\n    } else if (loading) {\n      return React.createElement(Loading, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n    } else {\n      return React.createElement(\"div\", {\n        id: \"container\",\n        className: \"ag-theme-blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Job Board\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(AgGridReact, {\n        onGridReady: this.onGridReady,\n        columnDefs: columnDefs,\n        rowData: rowData,\n        enableSorting: true,\n        enableFilter: true,\n        paginationAutoPageSize: true,\n        pagination: true,\n        rowSelection: 'single',\n        enableColResize: true,\n        onRowDoubleClicked: this.handlePopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), openPopup ? React.createElement(Popup, {\n        title: \"Job Detail\",\n        openPopup: openPopup,\n        detail: detail,\n        handlePopup: this.handlePopup,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }) : null);\n    }\n  }\n\n}\n\nexport default Jobs;","map":{"version":3,"sources":["/Users/jimmybui/Documents/Web&App/example/my_react_grid/frontend/src/components/jobs.js"],"names":["React","Component","AgGridReact","Popup","Loading","Error","moment","axios","Jobs","constructor","props","onGridReady","params","gridApi","api","gridColumnApi","columnApi","sizeColumnsToFit","autoSizeColumns","state","openPopup","error","loading","detail","columnDefs","headerName","field","width","cellClass","cellRenderer","data","value","format","rowData","handlePopup","bind","row","setState","componentDidMount","Promise","all","get","then","resp","resp1","resp3","jobs","map","item","applicants","applicant","find","item1","id","types","item3","job_type_id","Object","assign","sort","a","b","title","localeCompare","console","log","catch","err","render","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-blue.css';\nimport Popup from './popup';\nimport Loading from './loading';\nimport Error from './error';\nimport moment from 'moment';\nimport axios from 'axios';\n\nclass Jobs extends Component {\n  // Initialization\n  constructor(props) {\n    super(props);\n    this.state = {\n        openPopup: false,\n        error: null,\n        loading: true,\n        detail: {},\n        columnDefs: [\n                { headerName: \"Title\", field: \"title\", width: 500 },\n                { headerName: \"Type\", field: \"job_type\", width: 200 },\n                { headerName: \"Location\", field: \"location\", width: 200 },\n                { headerName: \"Date\", field: \"date\", cellClass: \"grid-number\", width: 150,\n                    cellRenderer: (data) => {\n                      return moment(data.value).format(\"DD/MM/YYYY\");\n                  }\n                }\n            ],\n        rowData: []\n    };\n    this.handlePopup = this.handlePopup.bind(this);\n  }\n\n  // Handle showing and hiding the popup\n  handlePopup(row) {\n    // Get the detail job\n    this.setState({\n      openPopup: !this.state.openPopup,\n      detail: row && row.data ? row.data : {}\n    });\n  }\n    \n  componentDidMount() {\n    // Assume the request will be a haft of second\n    /* setTimeout(()=>{\n      // Get the list of jobs\n      axios.get('http://localhost:4000/jobs')\n      .then(resp => {\n        const jobs = resp.data.sort((a, b) => a.title.localeCompare(b.title));\n        this.setState({\n          loading: false,\n          rowData: jobs\n        })\n      }).catch((err) => \n        this.setState({\n          loading: false,\n          error: err\n        })\n      );\n    }, 500); */\n\n    // Get the list of jobs\n    Promise.all([\n      axios.get('http://localhost:4000/jobs'),\n      axios.get('http://localhost:4000/applicants'),\n      axios.get('http://localhost:4000/job_types')\n    ]).then(([resp, resp1, resp3]) => {\n        const jobs = resp.data.map(item => {\n          // Get the list of applicants\n          const applicants = item.applicants.map(applicant => {\n            return resp1.data.find(item1 => item1.id == applicant);\n          });\n\n          // Get job type name\n          const types = resp3.data.find(item3 => item3.id == item.job_type_id);\n\n          return Object.assign(item, { applicants: applicants });\n        }).sort((a, b) => a.title.localeCompare(b.title));\n\n        console.log(jobs);\n        this.setState({\n          loading: false,\n          rowData: jobs\n        })\n      }).catch((err) => \n        this.setState({\n          loading: false,\n          error: err\n        })\n      );\n  }\n    \n  onGridReady = params => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n    this.gridApi.sizeColumnsToFit();\n    this.gridColumnApi.autoSizeColumns();\n  }\n\n  render() {\n    const { openPopup, error, loading, detail, columnDefs, rowData } = this.state;\n    if (error) {\n      return (<Error message={ error.message } />);\n    } else if (loading) {\n      return (<Loading />);\n    } else {\n        return (\n            <div id=\"container\" className=\"ag-theme-blue\">\n                <h3>Job Board</h3><br/>\n                <AgGridReact\n                    onGridReady={this.onGridReady}\n                    columnDefs = {columnDefs}\n                    rowData = {rowData}\n                    enableSorting = {true}\n                    enableFilter = {true}\n                    paginationAutoPageSize = {true}\n                    pagination = {true}\n                    rowSelection = {'single'}\n                    enableColResize = {true}\n                    onRowDoubleClicked = {this.handlePopup}>\n                </AgGridReact>\n                {\n                    openPopup ? \n                    <Popup  \n                          title='Job Detail'\n                          openPopup={openPopup}\n                          detail={detail}\n                          handlePopup={this.handlePopup}\n                    />  \n                    : null\n                }\n            </div>\n        );\n    }\n  }\n}\n\nexport default Jobs;"]},"metadata":{},"sourceType":"module"}